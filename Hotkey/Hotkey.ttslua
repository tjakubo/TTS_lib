-- ~~~~~~
-- Script by dzikakulka
-- Issues, history at: http://github.com/tjakubo2/TTS_lib
--
-- Framework for binding functions to scripting key combination press and/or release easily
-- Description and usage in README.md in this lib folder in repository
-- ~~~~~~

if not package.loaded['Hotkey'] then
    Hotkey = {}
    package.loaded['Hotkey'] = Hotkey

    -- Register the press and call any press functions
    Hotkey.onScriptingButtonDown = function(index, playerColor)
        if playerColor ~= 'Grey' then
            Hotkey.PressButton(index, playerColor)
            local handlers = Hotkey.map.down[Hotkey.StateString(playerColor)]
            for _,handler in pairs(handlers) do
                handler(playerColor, 'down', index)
            end
        end
    end

    -- Call any release functions and then register release
    Hotkey.onScriptingButtonUp = function(index, playerColor)
        if playerColor ~= 'Grey' then
            local handlers = Hotkey.map.up[Hotkey.StateString(playerColor)]
            for _,handler in pairs(handlers) do
                handler(playerColor, 'up', index)
            end
            Hotkey.ReleaseButton(index, playerColor)
        end
    end
    
    -- Hook into event functions, use EventSub if present
    if package.loaded['EventSub'] then
        EventSub.Register('onScriptingButtonDown', Hotkey.onScriptingButtonDown)
        EventSub.Register('onScriptingButtonUp', Hotkey.onScriptingButtonUp)
    else
        assert(onScriptingButtonDown == nil, 'Hotkey init: Event onScriptingButtonDown already defined!')
        function onScriptingButtonDown(...)
            Hotkey.onScriptingButtonDown(table.unpack({...}))
        end
        assert(onScriptingButtonUp == nil, 'Hotkey init: Event onScriptingButtonUp already defined!')
        function onScriptingButtonUp(...)
            Hotkey.onScriptingButtonUp(table.unpack({...}))
        end
    end

    -- Amount of available buttons
    Hotkey.keyCount = 10
    -- Create a string representing press combination for easy comparision
    Hotkey.CreatePressTable = function()
        local out = {}
        for i = 1, Hotkey.keyCount do
            out[#out+1] = 0
        end
        return out
    end
    Hotkey.PressStringFromState = function(state)
        return table.concat(state)
    end
    Hotkey.PressStringFromIndexes = function(indexes)
        local state = Hotkey.CreatePressTable()
        for _, index in ipairs(indexes) do state[index] = 1 end
        return Hotkey.PressStringFromState(state)
    end

    -- Main table containing info on player keypresses
    Hotkey.stateTable =  {
            ['White'] = Hotkey.CreatePressTable(),
            ['Brown'] = Hotkey.CreatePressTable(),
            ['Red'] = Hotkey.CreatePressTable(),
            ['Orange'] = Hotkey.CreatePressTable(),
            ['Yellow'] = Hotkey.CreatePressTable(),
            ['Green'] = Hotkey.CreatePressTable(),
            ['Teal'] = Hotkey.CreatePressTable(),
            ['Blue'] = Hotkey.CreatePressTable(),
            ['Pink'] = Hotkey.CreatePressTable(),
            ['Purple'] = Hotkey.CreatePressTable(),
            ['Black'] = Hotkey.CreatePressTable()
    }
    Hotkey.StateString = function(color)
        return Hotkey.PressStringFromState(Hotkey.stateTable[color])
    end

    -- Map of combination strings to a table of handler functions
    Hotkey.map = {
        up = {},
        down = {}
    }

    -- Add a handler function for a combination
    Hotkey.Bind = function(combination, handler, direction)
        assert(type(combination) == 'table', 'Hotkey.Bind: combination not a table!')
        assert(type(handler) == 'function', 'Hotkey.Bind: handler not a function!')
        direction = direction or 'down'
        local pressString = Hotkey.PressStringFromIndexes(combination)
        if direction == 'up' or direction == 'any' then
            local handlers = Hotkey.map.up[pressString] or {}
            table.insert(handlers, handler)
            Hotkey.map.up[pressString] = handlers
        end
        if direction == 'down' or direction == 'any' then
            local handlers = Hotkey.map.down[pressString] or {}
            table.insert(handlers, handler)
            Hotkey.map.down[pressString] = handlers
        end
    end

    -- Register button press in state tables
    Hotkey.PressButton = function(index, playerColor)
        if Hotkey.stateTable then
            Hotkey.stateTable[playerColor][index] = 1
        end
    end
    -- Register button release in state tables
    Hotkey.ReleaseButton = function(index, playerColor)
        if Hotkey.stateTable then
            Hotkey.stateTable[playerColor][index] = 0
        end
    end
    
    return Hotkey
else
    return package.loaded['Hotkey']
end
